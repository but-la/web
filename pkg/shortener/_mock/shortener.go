// Code generated by MockGen. DO NOT EDIT.
// Source: shortener.go

// Package mock_shortener is a generated GoMock package.
package mock_shortener

import (
	context "context"
	reflect "reflect"

	models "github.com/dbut2/shortener/pkg/models"
	shortener "github.com/dbut2/shortener/pkg/shortener"
	gomock "github.com/golang/mock/gomock"
)

// MockShortener is a mock of Shortener interface.
type MockShortener struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerMockRecorder
}

// MockShortenerMockRecorder is the mock recorder for MockShortener.
type MockShortenerMockRecorder struct {
	mock *MockShortener
}

// NewMockShortener creates a new mock instance.
func NewMockShortener(ctrl *gomock.Controller) *MockShortener {
	mock := &MockShortener{ctrl: ctrl}
	mock.recorder = &MockShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortener) EXPECT() *MockShortenerMockRecorder {
	return m.recorder
}

// Lengthen mocks base method.
func (m *MockShortener) Lengthen(ctx context.Context, code string, metadata ...shortener.Metadata) (models.Link, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, code}
	for _, a := range metadata {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Lengthen", varargs...)
	ret0, _ := ret[0].(models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lengthen indicates an expected call of Lengthen.
func (mr *MockShortenerMockRecorder) Lengthen(ctx, code interface{}, metadata ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, code}, metadata...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lengthen", reflect.TypeOf((*MockShortener)(nil).Lengthen), varargs...)
}

// Shorten mocks base method.
func (m *MockShortener) Shorten(ctx context.Context, url string, metadata ...shortener.Metadata) (models.Link, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url}
	for _, a := range metadata {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shorten", varargs...)
	ret0, _ := ret[0].(models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockShortenerMockRecorder) Shorten(ctx, url interface{}, metadata ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url}, metadata...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockShortener)(nil).Shorten), varargs...)
}

// ShortenCode mocks base method.
func (m *MockShortener) ShortenCode(ctx context.Context, url, code string, metadata ...shortener.Metadata) (models.Link, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url, code}
	for _, a := range metadata {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShortenCode", varargs...)
	ret0, _ := ret[0].(models.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenCode indicates an expected call of ShortenCode.
func (mr *MockShortenerMockRecorder) ShortenCode(ctx, url, code interface{}, metadata ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url, code}, metadata...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenCode", reflect.TypeOf((*MockShortener)(nil).ShortenCode), varargs...)
}
